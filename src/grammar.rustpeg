use crate::ast::*;
use super::ExpressionTail;

pub program -> Program
    = body:block_body { Program { body } }

block_body -> Vec<Expression>
    = body:expr_wrapped ** ";" __ ";"? __ { body }

expr_wrapped -> Expression
    = __ expr:expr __ { expr }

expr -> Expression
    = d:declaration { Expression::Declaration(Box::new(d)) }
    / i:if_else { Expression::IfElse(Box::new(i)) }
    / l:lambda { Expression::Lambda(Box::new(l)) }
    / bin_expr

bin_expr -> Expression = #infix<prefix_expr_wrapped> {
    #L left keyword_or right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Or, right })) }
    #L left keyword_and right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::And, right })) }
    #L left "==" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Eq, right })) }
       left "!=" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Ne, right })) }
    #L left ">=" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Ge, right })) }
       left "<=" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Le, right })) }
       left ">" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Gt, right })) }
       left "<" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Lt, right })) }
    #R left "++" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Concat, right })) }
    #L left "+" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Add, right })) }
       left "-" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Sub, right })) }
    #L left "*" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Mul, right })) }
       left "/" right { Expression::Binary(Box::new(Binary{ left, op: BinaryOperator::Div, right })) }
}

prefix_expr_wrapped -> Expression
    = __ e:prefix_expr __ { e }

prefix_expr -> Expression
    = "+" __ expr:prefix_expr { Expression::Unary(Box::new(Unary{ expr, op: UnaryOperator::Pos })) }
    / "!" __ expr:prefix_expr { Expression::Unary(Box::new(Unary{ expr, op: UnaryOperator::Not })) }
    / "-" __ expr:prefix_expr { Expression::Unary(Box::new(Unary{ expr, op: UnaryOperator::Neg })) }
    / call_expr

call_expr -> Expression
    = head:atom_expr tail:expr_tail* {
        let mut full = head;
        for part in tail { full = part.prepend(full) }
        full
    }

expr_tail -> ExpressionTail
    = __ "(" __ args:expr_list __ ","? __ ")" __ { ExpressionTail::Call(args) }
    / __ "." __ property:id __ { ExpressionTail::MemberAccess(property) }

atom_expr -> Expression
    = "(" __ expr:expr __ ")" { expr }
    / f:function { Expression::Function(Box::new(f)) }
    / block:block { Expression::Block(Box::new(block)) }
    / nl:number_literal { Expression::NumberLiteral(Box::new(nl)) }
    / sl:string_literal { Expression::StringLiteral(Box::new(sl)) }
    / bl:boolean_literal { Expression::BooleanLiteral(Box::new(bl)) }
    / vl:void_literal { Expression::VoidLiteral(Box::new(vl)) }
    / id:id { Expression::Id(Box::new(id)) }

expr_list -> Vec<Expression>
    = expr:expr_wrapped ** "," __ ","? { expr }

declaration -> Declaration
    = keyword_let __ id:id __ "=" __ value:expr { Declaration{ id, value } }

if_else -> IfElse
    = keyword_if __ "(" __ condition:expr __ ")" __ then:expr other:if_else_branch? {
        IfElse{ condition, then, r#else: other }
    }

if_else_branch -> Expression
    = __ keyword_else __ other:expr { other }

block -> Block
    = "{" __ body:block_body __ "}" { Block { body } }

id -> Id
    = #quiet<name:$(!keyword [a-zA-Z_$][a-zA-Z_0-9]*) { Id{ name: name.to_owned() } }>
    / #expected("identifier")

lambda -> Lambda
    = "(" __ slots:slot_list __ ")" __  "=>" __ expression:expr {
        Lambda {
            slots,
            expression,
        }
    }

function -> Function
    = keyword_function __ id:id __ "(" __ slots:slot_list __ ")" __ block:block {
        Function {
            id,
            slots,
            expression: Expression::Block(Box::new(block)),
        }
    }

slot_list -> Vec<Slot>
    = slots:wrapped_slot ** "," __ ","? { slots }

wrapped_slot -> Slot
    = __ slot:slot __ { slot }

slot -> Slot
    = id:id __ ty:slot_type_sufix? {
        Slot { id, ty: ty.unwrap_or(Id { name: String::from("Any") }) }
    }

slot_type_sufix -> Id
    = ":" __ ty:id { ty }

number_literal -> NumberLiteral
    = value:$([0-9]+ "."? [0-9]*) { NumberLiteral { value: value.parse().unwrap() } }

string_literal -> StringLiteral
    = "\"" value:string_content_double "\"" { StringLiteral { value } }
    / "'" value:string_content_single "'" { StringLiteral { value } }

string_content_double -> String
    = chars:string_char_double* { chars.into_iter().collect() }

string_char_double -> char
    = c:$([^\\"]) { c.chars().next().unwrap() }
    / escape

string_content_single -> String
    = chars:string_char_single* { chars.into_iter().collect() }

string_char_single -> char
    = c:$([^\\']) { c.chars().next().unwrap() }
    / escape

escape -> char
    = "\\" c:$(.) { match c {
        // TODO: Add other escape sequences
       "n" => '\n',
       _ => c.chars().next().unwrap()
    } }

boolean_literal -> BooleanLiteral
    = keyword_true { BooleanLiteral { value: true } }
    / keyword_false { BooleanLiteral { value: false } }

void_literal -> VoidLiteral
    = keyword_void { VoidLiteral { } }

__ = #quiet<(whitespace / eol / comment)*>

keyword = keyword_function / keyword_if / keyword_else / keyword_let / keyword_void / keyword_true / keyword_false / keyword_and / keyword_or

keyword_function = "function" end_of_word
keyword_if = "if" end_of_word
keyword_else = "else" end_of_word
keyword_let = "let" end_of_word
keyword_void = "void" end_of_word
keyword_true = "true" end_of_word
keyword_false = "false" end_of_word
keyword_and = "and" end_of_word
keyword_or = "or" end_of_word

end_of_word = ! [a-zA-Z0-9_$]

whitespace
    = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]

eol
    = "\n" / "\r\n" / "\r" / "\u{2028}" / "\u{2029}"

comment
    = "//" (!eol .)* eol
    / "/*" (!"*/" .)* "*/"
