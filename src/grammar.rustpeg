use crate::ast::*;
use super::ExpressionTail;

pub program -> Program
    = body:block_body { Program { body } }

block_body -> Vec<Expression>
    = body:wrapped_expr ** ";" __ ";"? __ { body }

wrapped_expr -> Expression
    = __ expr:expr __ { expr }

expr -> Expression
    = d:declaration { Expression::Declaration(Box::new(d)) }
    / f:function { Expression::Function(Box::new(f)) }
    / l:lambda { Expression::Lambda(Box::new(l)) }
    / head:atom tail:expr_tail* {
        let mut full = head;
        for part in tail { full = part.prepend(full) }
        full
    }

declaration -> Declaration
    = "let" space id:id __ "=" __ value:expr { Declaration{ id, value } }

expr_tail -> ExpressionTail
    = __ "(" __ args:expr_list __ ","? __ ")" __ { ExpressionTail::Call(args) }
    / __ "." __ property:id __ { ExpressionTail::MemberAccess(property) }

expr_list -> Vec<Expression>
    = expr:wrapped_atom ** "," __ ","? { expr }

wrapped_atom -> Expression
    = __ atom:atom __ { atom }

atom -> Expression
    = "(" __ expr:expr __ ")" { expr }
    / block:block { Expression::Block(Box::new(block)) }
    / id:id { Expression::Id(Box::new(id)) }
    / nl:number_literal { Expression::NumberLiteral(Box::new(nl)) }
    / sl:string_literal { Expression::StringLiteral(Box::new(sl)) }

block -> Block
    = "{" __ body:block_body __ "}" { Block { body } }

id -> Id
    = #quiet<name:$([a-zA-Z_][a-zA-Z_0-9]*) { Id{ name: name.to_owned() } }>
    / #expected("identifier")

lambda -> Lambda
    = "(" __ slots:slot_list __ ")" __  "=>" __ expression:expr {
        Lambda {
            slots,
            expression,
        }
    }

function -> Function
    = "function" space id:id __ "(" __ slots:slot_list __ ")" __ block:block {
        Function {
            id,
            slots,
            expression: Expression::Block(Box::new(block)),
        }
    }

slot_list -> Vec<Slot>
    = slots:wrapped_slot ** "," __ ","? { slots }

wrapped_slot -> Slot
    = __ slot:slot __ { slot }

slot -> Slot
    = id:id __ ty:slot_type_sufix? {
        Slot { id, ty: ty.unwrap_or(Id { name: String::from("Any") }) }
    }

slot_type_sufix -> Id
    = ":" __ ty:id { ty }

// IDEA: We have two options for number literals
// 1. ([0-9]+ "."? [0-9]*)
// 2. ([0-9]+ ("." [0-9]+)?)
//
// Option one is like JS and the following is all vaild:
// - 12.12
// - 12.
// - 12..toString()
// The second might be a bit more intuitive (?) and allows the following:
// - 12.12
// - 12.toString()
//
number_literal -> NumberLiteral
    = value:$([0-9]+ "."? [0-9]*) { NumberLiteral { value: value.parse().unwrap() } }

string_literal -> StringLiteral
    = "\"" value:$([^"]*) "\"" { StringLiteral { value: value.to_owned() } }

space = #quiet<(whitespace / eol / comment)+>

__ = #quiet<(whitespace / eol / comment)*>

whitespace
    = [ \t\u{00A0}\u{FEFF}\u{1680}\u{180E}\u{2000}-\u{200A}\u{202F}\u{205F}\u{3000}]

eol
    = "\n" / "\r\n" / "\r" / "\u{2028}" / "\u{2029}"

comment
    = "//" (!eol .)* eol
    / "/*" (!"*/" .)* "*/"
